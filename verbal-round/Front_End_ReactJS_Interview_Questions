Here is the updated and renumbered list of questions:

1. Destructuring of arrays/objects
2. Template literals
3. Default parameters
4. Arrow functions vs Normal Functions
5. Spread operators
6. Blocked-scoped Splice vs Slice
7. Object Literals
8. Destructuring
9. let and const vs var
10. Currying and Closures
11. super keyword in JavaScript
12. Pure functions
13. Higher-Order (HOC) functions
14. Data types in JavaScript
15. Virtual DOM vs Real DOM
16. What is React
17. What is Babel
18. ECMAScript
19. What is NodeJS
20. Refs in React
21. Keys in React
22. HOC - Higher-Order Component
23. Class vs Functional components
24. What is flexbox
25. Box Model
26. Life cycle methods in React
27. Hooks in React
28. What is Redux
29. Actions and Reducers
30. Redux Persist
31. Middlewares in Redux - Thunk, Saga
32. Redux Applymiddleware
33. Redux connect
34. Redux Async Storage
35. Redux Hooks
36. Promises vs Async/Await
37. Promise chaining in JavaScript
38. How does JavaScript figure out that a promise is resolved
39. Promise states
40. === vs == operator
41. Self-invoked functions
42. Cookies vs Session Storage vs Local Storage
43. Prototype in JS
44. Asynchronous JavaScript
45. Callbacks
46. Callback hell
47. Why Redux is used mostly
48. Debouncing and Throttling
49. Events in JS
50. Bind and This in JS
51. How to prevent re-renders in React
52. Threads in JS
53. State vs Props
54. TypeScript vs JavaScript
55. Git Rebase vs Git Merge
56. Git cherry-pick
57. What is a regular expression
58. REM and EM in CSS
59. React Navigation
60. WebViews in React
61. What is CI/CD
62. What is Push Notification
63. What is Firebase
64. Call and Apply in JS
65. SQL vs NoSQL
66. What is RDBMS
67. Angular vs React
68. What is ExpressJS
69. AJAX, API, and JSON
70. Event Loop in NodeJS
71. Why do we import React on top of the file
72. CSS Transition
73. React Pure Components
74. Hoisting in JS
75. How to Improve the performance of your web applications
76. How to improve the performance of your React application
77. Write React component without JSX
78. Iterators and Generators
79. Symbol in JS
80. Class Inheritance
81. Abstract Class
82. Lazy loading in React
83. Session management
84. Web Security Fundamentals
85. Alerts and Metrics of Web Applications
86. REST and APIs
87. Ways to debug web applications
88. What is Docker
89. Shallow comparison vs Deep comparison in React
90. PropTypes in React
91. Preference order in CSS
92. Explain the entire process (what actually happens in the backend) starting from sending requests from client to server and then back to the client
93. Client Side Rendering vs Server Side Rendering vs Static Site Generation
94. Purpose of Package.lock json
95. Mono Repo vs Multi Repo
96. How ESlint works internally
97. SSL Pinning and Auth
98. Abstract Syntax Tree
99. How to Reuse React Native in Web
100. New Feature additions in React Native/React?
101. How we will measure slowness in the Web/App?
102. Forward Ref, Scroll to Index, paginated flatlist, extra data, onEndReach

Q103. Monolithic vs Microservice architecture  
Ans. [Link](https://www.techtarget.com/whatis/definition/monolithic-architecture)

Q104. Facade Structural Design Pattern  
Ans. [Link](https://refactoring.guru/design-patterns/facade)

Q105. Creator of JavaScript  
Ans. JavaScript was invented by Brendan Eich in 1995. It was developed for Netscape 2 and became the ECMA-262 standard in 1997. It took Eich only 10 days to develop the scripting language, then known as Mocha. He co-founded the Mozilla project.

Q106. ECMAScript  
Ans. ECMAScript is a JavaScript standard meant to ensure the interoperability of web pages across different web browsers. It is standardized by Ecma International according to the document ECMA-262. Designed by Brendan Eich. Interoperability - the ability of computer systems or software to exchange and make use of information. Example: A USB flash drive works on any USB environment because it follows certain USB specifications.

Q107. Top ES6 Features  
Ans. [Link](https://www.boardinfinity.com/blog/top-10-features-of-es6/)

Q108. ES6 to ES11 Features  
Ans. [Link](https://gist.github.com/rajaramtt/7df3702a04c644b0b62c9a64f48f3dbf)

Q109. Submodules in GitHub  
Ans. [Link](https://github.blog/2016-02-01-working-with-submodules/)

Q110. Call, apply, bind, map, filter, for, while

Q111. Syntax - async, promise, switch

Q112. mapStateToProps  
Q113. mapDispatchToProps  
Q114. Controlled and uncontrolled components  
Q115. Keys in React  
Q116. How to optimize a React app  
Q117. To find prime numbers between 1-1000  
Q118. Find the 2nd largest element in an array  
Q119. To find repeated characters in a string  
Q120. To find repeated characters in an array  
Q121. To find the max repeated character in a string  
Q122. To find the max repeated character in an array  
Q123. FlatList  
Q124. Bridging  
Q125. How it works under the hood  
Q126. Optimization  
Q127. Threads  
Q128. Reverse a linked list  
Q129. Rotate an array  
Q130. How can we fetch API data without using useEffect hook?  
Q131. What are the security measures which should be considered during development?  
Q132. Can we return setData inside a component?  
Q133. Multiple useEffects in a same component?  
Q134. Higher order components or custom hooks? Which approach will you follow.  
Q135. Why do we need currying in JS? Explain with example.  
Q136. Explain Array prototyping, generators.  
Q137. Explain Middlewares in React which you have used?  
Q138. Function closures and bind method difference.  
Q139. Explain service and web workers.  
Q140. Write a program to fetch real time data for a cricket/football match.  
Q141. Stateless components?  
Q142. How do you fetch multiple APIs in a single time.  
Q143. Interceptors in axios library?  
Q144. React suspense?  
Q145. How will you select between SSR and CSR for you application? What parameters will you consider.  
Q146. What is A11y issues? How do you handle it?  
Q147. Box model, CSS animation, SASS variables and mixins in CSS.  
Q148. How authentication works with JWT?  
Q149. What is selective hydration?  
Q150. Crawlers, indexing a page and what are the ways?  
Q151. Explain redux architecture.  
Q152. How will you set redirects using axios library.  
Q153. Different types of object creation.  
Q154. Explain hoisting, TDZ.  
Q155. Explain IIFE with example.  
Q156. What is obj literal and JSON obj.  
Q157. First class functions.  
Q158. Error pages creation  
Q159. Scopes in JS  
Q160. Event Loop - Task/MicroTask Queues.  
Q161. Second Largest number from array without using Math, sort functions.  
Q162. Synthetic events  
Q163. Cookies, localStorage and sessionStorage  
Q164. How Babel works?  
Q165. Explain webpack, parcel and some of its features.  
Q166. Challenges with react js  
Q167. Memoization techniques, pure functions and pure components.  
Q168. HTTP methods...explain  
Q169. Call, apply and bind  
Q170. Arrow functions, anonymous functions, this keyword  
Q171. ES6 features.  
Q172. Create a triangle using CSS  
Q173. Explain rate limiting and write a small code to demonstrate.  
Q174. ESLint and security plugins used in your project?  
Q175. CORS, CSP and XSS explain  
Q176. Tree shaking, debouncing and throttling  
Q177. Write a program for form validation without using any library  
Q178. Array operations  
Q179. Nested array operations, flattening of an array likewise  
Q180. Performance optimization techniques explain  
Q181. Shallow and deep copy..explain how will you create it  
Q182. Various hooks syntax useParam, useReducer, useQuery, useContext and many more.
